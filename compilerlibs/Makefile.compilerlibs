#**************************************************************************
#*                                                                        *
#*                                 OCaml                                  *
#*                                                                        *
#*            Xavier Leroy, projet Cristal, INRIA Rocquencourt            *
#*                                                                        *
#*   Copyright 1999 Institut National de Recherche en Informatique et     *
#*     en Automatique.                                                    *
#*                                                                        *
#*   All rights reserved.  This file is distributed under the terms of    *
#*   the GNU Lesser General Public License version 2.1, with the          *
#*   special exception on linking described in the file LICENSE.          *
#*                                                                        *
#**************************************************************************

# Targets and dependencies for compilerlibs archives

# This file is meant to be included from the root Makefile, not to be
# executed directly (this is why it is not simply named Makefile).

utils_SOURCES = $(addprefix utils/, \
  config.mli config.ml \
  build_path_prefix_map.mli build_path_prefix_map.ml \
  misc.mli misc.ml \
  identifiable.mli identifiable.ml \
  numbers.mli numbers.ml \
  arg_helper.mli arg_helper.ml \
  local_store.mli local_store.ml \
  load_path.mli load_path.ml \
  clflags.mli clflags.ml \
  profile.mli profile.ml \
  terminfo.mli terminfo.ml \
  ccomp.mli ccomp.ml \
  warnings.mli warnings.ml \
  consistbl.mli consistbl.ml \
  strongly_connected_components.mli strongly_connected_components.ml \
  targetint.mli targetint.ml \
  int_replace_polymorphic_compare.mli int_replace_polymorphic_compare.ml \
  domainstate.mli domainstate.ml \
  binutils.mli binutils.ml \
  lazy_backtrack.mli lazy_backtrack.ml \
  diffing.mli diffing.ml \
  diffing_with_keys.mli diffing_with_keys.ml)

parsing_SOURCES = $(addprefix parsing/, \
  location.mli location.ml \
  unit_info.mli unit_info.ml \
  asttypes.mli \
  longident.mli longident.ml \
  parsetree.mli \
  docstrings.mli docstrings.ml \
  syntaxerr.mli syntaxerr.ml \
  ast_helper.mli ast_helper.ml \
  camlinternalMenhirLib.mli camlinternalMenhirLib.ml \
  parser.mly \
  lexer.mll \
  pprintast.mli pprintast.ml \
  parse.mli parse.ml \
  printast.mli printast.ml \
  ast_mapper.mli ast_mapper.ml \
  ast_iterator.mli ast_iterator.ml \
  attr_helper.mli attr_helper.ml \
  builtin_attributes.mli builtin_attributes.ml \
  ast_invariants.mli ast_invariants.ml \
  depend.mli depend.ml)

typing_SOURCES = \
$(addprefix typing/,\
  annot.mli \
  ident.mli ident.ml \
  path.mli path.ml \
  primitive.mli primitive.ml \
  type_immediacy.mli type_immediacy.ml \
  outcometree.mli \
  shape.mli shape.ml \
  types.mli types.ml \
  btype.mli btype.ml \
  oprint.mli oprint.ml \
  subst.mli subst.ml \
  predef.mli predef.ml \
  datarepr.mli datarepr.ml) \
  file_formats/cmi_format.mli file_formats/cmi_format.ml \
$(addprefix typing/, \
  persistent_env.mli persistent_env.ml \
  env.mli env.ml \
  errortrace.mli errortrace.ml \
  typedtree.mli typedtree.ml \
  signature_group.mli signature_group.ml \
  printtyped.mli printtyped.ml \
  ctype.mli ctype.ml \
  printtyp.mli printtyp.ml \
  includeclass.mli includeclass.ml \
  mtype.mli mtype.ml \
  envaux.mli envaux.ml \
  includecore.mli includecore.ml \
  tast_iterator.mli tast_iterator.ml \
  tast_mapper.mli tast_mapper.ml \
  stypes.mli stypes.ml) \
  file_formats/cmt_format.mli file_formats/cmt_format.ml \
$(addprefix typing/, \
  cmt2annot.mli cmt2annot.ml \
  untypeast.mli untypeast.ml \
  includemod.mli includemod.ml \
  includemod_errorprinter.mli includemod_errorprinter.ml \
  typetexp.mli typetexp.ml \
  printpat.mli printpat.ml \
  patterns.mli patterns.ml \
  parmatch.mli parmatch.ml \
  typedecl_properties.mli typedecl_properties.ml \
  typedecl_variance.mli typedecl_variance.ml \
  typedecl_unboxed.mli typedecl_unboxed.ml \
  typedecl_immediacy.mli typedecl_immediacy.ml \
  typedecl_separability.mli typedecl_separability.ml \
  typeopt.mli typeopt.ml \
  typedecl.mli typedecl.ml \
  rec_check.mli rec_check.ml \
  typecore.mli typecore.ml \
  typeclass.mli typeclass.ml \
  typemod.mli typemod.ml)

lambda_SOURCES = $(addprefix lambda/, \
  debuginfo.mli debuginfo.ml \
  lambda.mli lambda.ml \
  printlambda.mli printlambda.ml \
  switch.mli switch.ml \
  matching.mli matching.ml \
  translobj.mli translobj.ml \
  translattribute.mli translattribute.ml \
  translprim.mli translprim.ml \
  translcore.mli translcore.ml \
  translclass.mli translclass.ml \
  translmod.mli translmod.ml \
  tmc.mli tmc.ml \
  simplif.mli simplif.ml \
  runtimedef.mli runtimedef.ml)

comp_SOURCES = \
$(addprefix file_formats/, \
  cmo_format.mli \
  cmx_format.mli \
  cmxs_format.mli) \
$(addprefix bytecomp/, \
  meta.mli meta.ml \
  opcodes.mli opcodes.ml \
  bytesections.mli bytesections.ml \
  dll.mli dll.ml \
  symtable.mli symtable.ml) \
$(addprefix driver/, \
  pparse.mli pparse.ml \
  compenv.mli compenv.ml \
  main_args.mli main_args.ml \
  compmisc.mli compmisc.ml \
  makedepend.mli makedepend.ml \
  compile_common.mli compile_common.ml)
# All file format descriptions (including cmx{,s}) are in the
# ocamlcommon library so that ocamlobjinfo can depend on them.

ocamlcommon_SOURCES = \
  $(utils_SOURCES) $(parsing_SOURCES) $(typing_SOURCES) \
  $(lambda_SOURCES) $(comp_SOURCES)

ocamlbytecomp_SOURCES = \
$(addprefix bytecomp/, \
  instruct.mli instruct.ml \
  bytegen.mli bytegen.ml \
  printinstr.mli printinstr.ml \
  emitcode.mli emitcode.ml \
  bytelink.mli bytelink.ml \
  bytelibrarian.mli bytelibrarian.ml \
  bytepackager.mli bytepackager.ml) \
$(addprefix driver/, \
  errors.mli errors.ml \
  compile.mli compile.ml \
  maindriver.mli maindriver.ml)

intel_SOURCES = \
  x86_ast.mli \
  x86_proc.mli x86_proc.ml \
  x86_dsl.mli x86_dsl.ml \
  x86_gas.mli x86_gas.ml \
  x86_masm.mli x86_masm.ml

asmcomp_SOURCES = \
$(addprefix asmcomp/, \
  $(arch_specific_SOURCES) \
  arch.mli arch.ml \
  cmm.mli cmm.ml \
  printcmm.mli printcmm.ml \
  reg.mli reg.ml \
  mach.mli mach.ml \
  proc.mli proc.ml \
  strmatch.mli strmatch.ml \
  cmmgen_state.mli cmmgen_state.ml \
  cmm_helpers.mli cmm_helpers.ml \
  afl_instrument.mli afl_instrument.ml \
  thread_sanitizer.mli thread_sanitizer.ml \
  cmmgen.mli cmmgen.ml \
  cmm_invariants.mli cmm_invariants.ml \
  interval.mli interval.ml \
  printmach.mli printmach.ml \
  dataflow.mli dataflow.ml \
  polling.mli polling.ml \
  selectgen.mli selectgen.ml \
  selection.mli selection.ml \
  comballoc.mli comballoc.ml \
  CSEgen.mli CSEgen.ml \
  CSE.mli CSE.ml \
  liveness.mli liveness.ml \
  spill.mli spill.ml \
  split.mli split.ml \
  interf.mli interf.ml \
  coloring.mli coloring.ml \
  linscan.mli linscan.ml \
  reloadgen.mli reloadgen.ml \
  reload.mli reload.ml \
  deadcode.mli deadcode.ml \
  stackframegen.mli stackframegen.ml \
  stackframe.mli stackframe.ml \
  linear.mli linear.ml \
  printlinear.mli printlinear.ml \
  linearize.mli linearize.ml) \
  file_formats/linear_format.mli file_formats/linear_format.ml \
$(addprefix asmcomp/, \
  schedgen.mli schedgen.ml \
  scheduling.mli scheduling.ml \
  branch_relaxation.mli branch_relaxation.ml \
  emitaux.mli emitaux.ml \
  emit.mli emit.ml \
  asmgen.mli asmgen.ml \
  asmlink.mli asmlink.ml \
  asmlibrarian.mli asmlibrarian.ml \
  asmpackager.mli asmpackager.ml) \
$(addprefix driver/, \
  opterrors.mli opterrors.ml \
  optcompile.mli optcompile.ml \
  optmaindriver.mli optmaindriver.ml)

# Files under middle_end/ are not to reference files under asmcomp/.
# This ensures that the middle end can be linked (e.g. for objinfo) even when
# the native code compiler is not present for some particular target.

middle_end_closure_SOURCES = $(addprefix middle_end/closure/, \
  closure.mli closure.ml \
  closure_middle_end.mli closure_middle_end.ml)

# Owing to dependencies through [Compilenv], which would be
# difficult to remove, some of the lower parts of Flambda (anything that is
# saved in a .cmx file) have to be included in the [MIDDLE_END] stanza, below.
middle_end_flambda_SOURCES = \
$(addprefix middle_end/flambda/, \
  import_approx.mli import_approx.ml \
  lift_code.mli lift_code.ml \
  closure_conversion_aux.mli closure_conversion_aux.ml \
  closure_conversion.mli closure_conversion.ml \
  initialize_symbol_to_let_symbol.mli initialize_symbol_to_let_symbol.ml \
  lift_let_to_initialize_symbol.mli lift_let_to_initialize_symbol.ml \
  find_recursive_functions.mli find_recursive_functions.ml \
  invariant_params.mli invariant_params.ml \
  inconstant_idents.mli inconstant_idents.ml \
  alias_analysis.mli alias_analysis.ml \
  lift_constants.mli lift_constants.ml \
  share_constants.mli share_constants.ml \
  simplify_common.mli simplify_common.ml \
  remove_unused_arguments.mli remove_unused_arguments.ml \
  remove_unused_closure_vars.mli remove_unused_closure_vars.ml \
  remove_unused_program_constructs.mli remove_unused_program_constructs.ml \
  simplify_boxed_integer_ops.mli simplify_boxed_integer_ops.ml \
  simplify_primitives.mli simplify_primitives.ml \
  inlining_stats_types.mli inlining_stats_types.ml \
  inlining_stats.mli inlining_stats.ml \
  inline_and_simplify_aux.mli inline_and_simplify_aux.ml \
  inlining_decision_intf.mli \
  remove_free_vars_equal_to_args.mli remove_free_vars_equal_to_args.ml \
  extract_projections.mli extract_projections.ml \
  augment_specialised_args.mli augment_specialised_args.ml \
  unbox_free_vars_of_closures.mli unbox_free_vars_of_closures.ml \
  unbox_specialised_args.mli unbox_specialised_args.ml \
  unbox_closures.mli unbox_closures.ml \
  inlining_transforms.mli inlining_transforms.ml \
  inlining_decision.mli inlining_decision.ml \
  inline_and_simplify.mli inline_and_simplify.ml \
  ref_to_variables.mli ref_to_variables.ml \
  flambda_invariants.mli flambda_invariants.ml \
  traverse_for_exported_symbols.mli traverse_for_exported_symbols.ml \
  build_export_info.mli build_export_info.ml \
  closure_offsets.mli closure_offsets.ml \
  un_anf.mli un_anf.ml \
  flambda_to_clambda.mli flambda_to_clambda.ml \
  flambda_middle_end.mli flambda_middle_end.ml \
  simplify_boxed_integer_ops_intf.mli)

ocamlmiddleend_SOURCES = \
$(addprefix middle_end/, \
  internal_variable_names.mli internal_variable_names.ml \
  linkage_name.mli linkage_name.ml \
  compilation_unit.mli compilation_unit.ml \
  variable.mli variable.ml \
  $(addprefix flambda/base_types/, \
    closure_element.mli closure_element.ml \
    closure_id.mli closure_id.ml) \
  symbol.mli symbol.ml \
  backend_var.mli backend_var.ml \
  clambda_primitives.mli clambda_primitives.ml \
  printclambda_primitives.mli printclambda_primitives.ml \
  clambda.mli clambda.ml \
  printclambda.mli printclambda.ml \
  semantics_of_primitives.mli semantics_of_primitives.ml \
  convert_primitives.mli convert_primitives.ml \
  $(addprefix flambda/, \
    $(addprefix base_types/, \
      id_types.mli id_types.ml \
      export_id.mli export_id.ml \
      tag.mli tag.ml \
      mutable_variable.mli mutable_variable.ml \
      set_of_closures_id.mli set_of_closures_id.ml \
      set_of_closures_origin.mli set_of_closures_origin.ml \
      closure_origin.mli closure_origin.ml \
      var_within_closure.mli var_within_closure.ml \
      static_exception.mli static_exception.ml) \
    pass_wrapper.mli pass_wrapper.ml \
    allocated_const.mli allocated_const.ml \
    parameter.mli parameter.ml \
    projection.mli projection.ml \
    flambda.mli flambda.ml \
    flambda_iterators.mli flambda_iterators.ml \
    flambda_utils.mli flambda_utils.ml \
    freshening.mli freshening.ml \
    effect_analysis.mli effect_analysis.ml \
    inlining_cost.mli inlining_cost.ml \
    simple_value_approx.mli simple_value_approx.ml \
    export_info.mli export_info.ml \
    export_info_for_pack.mli export_info_for_pack.ml) \
  compilenv.mli compilenv.ml \
  backend_intf.mli) \
  $(middle_end_closure_SOURCES) \
  $(middle_end_flambda_SOURCES)

ocamloptcomp_SOURCES = $(ocamlmiddleend_SOURCES) $(asmcomp_SOURCES)

ocamltoplevel_SOURCES = $(addprefix toplevel/, \
  genprintval.mli genprintval.ml \
  topcommon.mli topcommon.ml \
  native/tophooks.mli native/tophooks.ml \
  byte/topeval.mli byte/topeval.ml \
  native/topeval.mli native/topeval.ml \
  byte/trace.mli byte/trace.ml \
  native/trace.mli native/trace.ml \
  toploop.mli toploop.ml \
  topprinters.mli topprinters.ml \
  topdirs.mli topdirs.ml \
  byte/topmain.mli byte/topmain.ml \
  native/topmain.mli native/topmain.ml)

TOPLEVEL_SHARED_MLIS = topeval.mli trace.mli topmain.mli
TOPLEVEL_SHARED_CMIS = $(TOPLEVEL_SHARED_MLIS:%.mli=%.cmi)
TOPLEVEL_SHARED_ARTEFACTS = $(TOPLEVEL_SHARED_MLIS) $(TOPLEVEL_SHARED_CMIS)

$(addprefix toplevel/byte/, $(TOPLEVEL_SHARED_CMIS)):\
toplevel/byte/%.cmi: toplevel/%.cmi
	cp $< toplevel/$*.mli $(@D)

$(addprefix toplevel/native/, $(TOPLEVEL_SHARED_CMIS)):\
toplevel/native/%.cmi: toplevel/%.cmi
	cp $< toplevel/$*.mli $(@D)

beforedepend::
	cd toplevel ; cp $(TOPLEVEL_SHARED_MLIS) byte/
	cd toplevel ; cp $(TOPLEVEL_SHARED_MLIS) native/

partialclean::
	cd toplevel/byte ; rm -f $(TOPLEVEL_SHARED_ARTEFACTS)
	cd toplevel/native ; rm -f $(TOPLEVEL_SHARED_ARTEFACTS)

ALL_CONFIG_CMO = utils/config_main.cmo utils/config_boot.cmo

utils/config_%.mli: utils/config.mli
	cp $^ $@

beforedepend:: utils/config_main.mli utils/config_boot.mli

$(addprefix compilerlibs/ocamlcommon., cma cmxa): \
  OC_OCAML_COMMON_LDFLAGS = += -linkall

partialclean::
	rm -f compilerlibs/ocamlcommon.cma

partialclean::
	rm -f compilerlibs/ocamlcommon.cmxa \
	      compilerlibs/ocamlcommon.a compilerlibs/ocamlcommon.lib


partialclean::
	rm -f compilerlibs/ocamlbytecomp.cma

partialclean::
	rm -f compilerlibs/ocamlbytecomp.cmxa \
	      compilerlibs/ocamlbytecomp.a compilerlibs/ocamlbytecomp.lib


partialclean::
	rm -f compilerlibs/ocamlmiddleend.cma \
	      compilerlibs/ocamlmiddleend.cmxa \
	      compilerlibs/ocamlmiddleend.a \
	      compilerlibs/ocamlmiddleend.lib


partialclean::
	rm -f compilerlibs/ocamloptcomp.cma

partialclean::
	rm -f compilerlibs/ocamloptcomp.cmxa \
	      compilerlibs/ocamloptcomp.a compilerlibs/ocamloptcomp.lib


compilerlibs/ocamltoplevel.cma: VPATH += toplevel/byte
partialclean::
	rm -f compilerlibs/ocamltoplevel.cma

compilerlibs/ocamltoplevel.cmxa: VPATH += toplevel/native
partialclean::
	rm -f compilerlibs/ocamltoplevel.cmxa \
	  compilerlibs/ocamltoplevel.a compilerlibs/ocamltoplevel.lib
